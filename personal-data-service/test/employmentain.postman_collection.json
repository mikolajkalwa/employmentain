{
	"info": {
		"_postman_id": "d33c19bf-2e86-4452-8266-f6fe71b8d48b",
		"name": "employmentain",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Valid body request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202\", () => {\r",
							"    pm.response.to.have.status(202);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\":120\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/commands/run",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"commands",
						"run"
					]
				}
			},
			"response": []
		},
		{
			"name": "String in body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains messages array\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.message).to.be.an(\"array\");\r",
							"})\r",
							"\r",
							"pm.test(\"Messages array contains information that id must be an integer\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.message).to.include(\"id must be an integer number\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"mleko masÅ‚o kot\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/commands/run",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"commands",
						"run"
					]
				}
			},
			"response": []
		},
		{
			"name": "Floating point in body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains messages array\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.message).to.be.an(\"array\");\r",
							"})\r",
							"\r",
							"pm.test(\"Messages array contains information that id must be an integer\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.message).to.include(\"id must be an integer number\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 101.26\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/commands/run",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"commands",
						"run"
					]
				}
			},
			"response": []
		},
		{
			"name": "Id exceeding 120",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains messages array\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.message).to.be.an(\"array\");\r",
							"})\r",
							"\r",
							"pm.test(\"Messages array contains information that id must not greater than 120\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.message).to.include(\"id must not be greater than 120\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 12250\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/commands/run",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"commands",
						"run"
					]
				}
			},
			"response": []
		},
		{
			"name": "Id below 100",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains messages array\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.message).to.be.an(\"array\");\r",
							"})\r",
							"\r",
							"pm.test(\"Messages array contains information that id must not be less than 100\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.message).to.include(\"id must not be less than 100\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 99\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/commands/run",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"commands",
						"run"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "localhost:3000"
		}
	]
}